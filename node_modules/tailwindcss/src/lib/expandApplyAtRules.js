import postcss from 'postcss'
import parser from 'postcss-selector-parser'

import { resolveMatches } from './generateRules'
import escapeClassName from '../util/escapeClassName'
import { applyImportantSelector } from '../util/applyImportantSelector'
import { movePseudos } from '../util/pseudoElements'

/** @typedef {Map<string, [any, import('postcss').Rule[]]>} ApplyCache */

function extractClasses(node) {
  /** @type {Map<string, Set<string>>} */
  let groups = new Map()

  let container = postcss.root({ nodes: [node.clone()] })

  container.walkRules((rule) => {
    parser((selectors) => {
      selectors.walkClasses((classSelector) => {
        let parentSelector = classSelector.parent.toString()

        let classes = groups.get(parentSelector)
        if (!classes) {
          groups.set(parentSelector, (classes = new Set()))
        }

        classes.add(classSelector.value)
      })
    }).processSync(rule.selector)
  })

  let normalizedGroups = Array.from(groups.values(), (classes) => Array.from(classes))
  let classes = normalizedGroups.flat()

  return Object.assign(classes, { groups: normalizedGroups })
}

let selectorExtractor = parser()

/**
 * @param {string} ruleSelectors
 */
function extractSelectors(ruleSelectors) {
  return selectorExtractor.astSync(ruleSelectors)
}

function extractBaseCandidates(candidates, separator) {
  let baseClasses = new Set()

  for (let candidate of candidates) {
    baseClasses.add(candidate.split(separator).pop())
  }

  return Array.from(baseClasses)
}

function prefix(context, selector) {
  let prefix = context.tailwindConfig.prefix
  return typeof prefix === 'function' ? prefix(selector) : prefix + selector
}

function* pathToRoot(node) {
  yield node
  while (node.parent) {
    yield node.parent
    node = node.parent
  }
}

/**
 * Only clone the node itself and not its children
 *
 * @param {*} node
 * @param {*} overrides
 * @returns
 */
function shallowClone(node, overrides = {}) {
  let children = node.nodes
  node.nodes = []

  let tmp = node.clone(overrides)

  node.nodes = children

  return tmp
}

/**
 * Clone just the nodes all the way to the top that are required to represent
 * this singular rule in the tree.
 *
 * For example, if we have CSS like this:
 * ```css
 * @media (min-width: 768px) {
 *   @supports (display: grid) {
 *     .foo {
 *       display: grid;
 *       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
 *     }
 *   }
 *
 *   @supports (backdrop-filter: blur(1px)) {
 *     .bar {
 *       backdrop-filter: blur(1px);
 *     }
 *   }
 *
 *   .baz {
 *     color: orange;
 *   }
 * }
 * ```
 *
 * And we're cloning `.bar` it'll return a cloned version of what's required for just that single node:
 *
 * ```css
 * @media (min-width: 768px) {
 *   @supports (backdrop-filter: blur(1px)) {
 *     .bar {
 *       backdrop-filter: blur(1px);
 *     }
 *   }
 * }
 * ```
 *
 * @param {import('postcss').Node} node
 */
function nestedClone(node) {
  for (let parent of pathToRoot(node)) {
    if (node === parent) {
      continue
    }

    if (parent.type === 'root') {
      break
    }

    node = shallowClone(parent, {
      nodes: [node],
    })
  }

  return node
}

/**
 * @param {import('postcss').Root} root
 */
function buildLocalApplyCache(root, context) {
  /** @type {ApplyCache} */
  let cache = new Map()

  root.walkRules((rule) => {
    // Ignore rules generated by Tailwind
    for (let node of pathToRoot(rule)) {
      if (node.raws.tailwind?.layer !== undefined) {
        return
      }
    }

    // Clone what's required to represent this singular rule in the tree
    let container = nestedClone(rule)
    let sort = context.offsets.create('user')

    for (let className of extractClasses(rule)) {
      let list = cache.get(className) || []
      cache.set(className, list)

      list.push([
        {
          layer: 'user',
          sort,
          important: false,
        },
        container,
      ])
    }
  })

  return cache
}

/**
 * @returns {ApplyCache}
 */
function buildApplyCache(applyCandidates, context) {
  for (let candidate of applyCandidates) {
    if (context.notClassCache.has(candidate) || context.applyClassCache.has(candidate)) {
      continue
    }

    if (context.classCache.has(candidate)) {
      context.applyClassCache.set(
        candidate,
        context.classCache.get(candidate).map(([meta, rule]) => [meta, rule.clone()])
      )
      continue
    }

    let matches = Array.from(resolveMatches(candidate, context))

    if (matches.length === 0) {
      context.notClassCache.add(candidate)
      continue
    }

    context.applyClassCache.set(candidate, matches)
  }

  return context.applyClassCache
}

/**
 * Build a cache only when it's first used
 *
 * @param {() => ApplyCache} buildCacheFn
 * @returns {ApplyCache}
 */
function lazyCache(buildCacheFn) {
  let cache = null

  return {
    get: (name) => {
      cache = cache || buildCacheFn()

      return cache.get(name)
    },
    has: (name) => {
      cache = cache || buildCacheFn()

      return cache.has(name)
    },
  }
}

/**
 * Take a series of multiple caches and merge
 * them so they act like one large cache
 *
 * @param {ApplyCache[]} caches
 * @returns {ApplyCache}
 */
function combineCaches(caches) {
  return {
    get: (name) => caches.flatMap((cache) => cache.get(name) || []),
    has: (name) => caches.some((cache) => cache.has(name)),
  }
}

function extractApplyCandidates(params) {
  let candidates = params.split(/[\s\t\n]+/g)

  if (candidates[candidates.length - 1] === '!important') {
    return [candidates.slice(0, -1), true]
  }

  return [candidates, false]
}

function processApply(root, context, localCache) {
  let applyCandidates = new Set()

  // Collect all @apply rules and candidates
  let applies = []
  root.walkAtRules('apply', (rule) => {
    let [candidates] = extractApplyCandidates(rule.params)

    for (let util of candidates) {
      applyCandidates.add(util)
    }

    applies.push(rule)
  })

  // Start the @apply process if we have rules with @apply in them
  if (applies.length === 0) {
    return
  }

  // Fill up some caches!
  let applyClassCache = combineCaches([localCache, buildApplyCache(applyCandidates, context)])

  /**
   * When we have an apply like this:
   *
   * .abc {
   *    @apply hover:font-bold;
   * }
   *
   * What we essentially will do is resolve to this:
   *
   * .abc {
   *    @apply .hover\:font-bold:hover {
   *      font-weight: 500;
   *    }
   * }
   *
   * Notice that the to-be-applied class is `.hover\:font-bold:hover` and that the utility candidate was `hover:font-bold`.
   * What happens in this function is that we prepend a `.` and escape the candidate.
   * This will result in `.hover\:font-bold`
   * Which means that we can replace `.hover\:font-bold` with `.abc` in `.hover\:font-bold:hover` resulting in `.abc:hover`
   *
   * @param {string} selector
   * @param {string} utilitySelectors
   * @param {string} candidate
   */
  function replaceSelector(selector, utilitySelectors, candidate) {
    let selectorList = extractSelectors(selector)
    let utilitySelectorsList = extractSelectors(utilitySelectors)
    let candidateList = extractSelectors(`.${escapeClassName(candidate)}`)
    let candidateClass = candidateList.nodes[0].nodes[0]

    selectorList.each((sel) => {
      /** @type {Set<import('postcss-selector-parser').Selector>} */
      let replaced = new Set()

      utilitySelectorsList.each((utilitySelector) => {
        let hasReplaced = false
        utilitySelector = utilitySelector.clone()

        utilitySelector.walkClasses((node) => {
          if (node.value !== candidateClass.value) {
            return
          }

          // Don't replace multiple instances of the same class
          // This is theoretically correct but only partially
          // We'd need to generate every possible permutation of the replacement
          // For example with `.foo + .foo { ‚Ä¶ }` and `section { @apply foo; }`
          // We'd need to generate all of these:
          // - `.foo + .foo`
          // - `.foo + section`
          // - `section + .foo`
          // - `section + sectio∞      ˇ     ïÅ     ¿JU    åï≤uwZ⁄           &   p < N T U S E R . D A T { 5 3 b 3 9 e 8 7 - 1 8 c 4 - 1 1 e a - a 8 1 1 - 0 0 0 d 3 a a 4 6 9 2 b } . T x R . b l f     X      ân          ∞¿JU    „ªÿuwZ⁄                < E t w R T U B P M . e t l   h      lÜ     ±     ¡JU    @
ÁuwZ⁄               & < S t o r G r o u p P o l i c y . l o g       ¿      ∫    Ç    p¡JU    ]1ÓuwZ⁄           &   Ñ < N T U S E R . D A T { 5 3 b 3 9 e 8 7 - 1 8 c 4 - 1 1 e a - a 8 1 1 - 0 0 0 d 3 a a 4 6 9 2 b } . T x R . 0 . r e g t r a n s - m s ∞      ∫    Ç    0¬JU    ]1ÓuwZ⁄           &   p < N T U S E R . D A T { 5 3 b 3 9 e 8 7 - 1 8 c 4 - 1 1 e a - a 8 1 1 - 0 0 0 d 3 a a 4 6 9 2 b } . T x R . b l f     H      äÇ    ≠     ‡¬JU    âXıuwZ⁄           "    < S A . D A T H      äÇ    ≠     (√JU    âXıuwZ⁄  Ä        "    < S A . D A T H      äÇ    ≠     p√JU    âXıuwZ⁄ Ä              < S A . D A T H      äÇ    ≠     ∏√JU    âXıuwZ⁄ Ä Ä            < S A . D A T H      äÇ    ≠      ƒJU    âXıuwZ⁄           "    < S A . D A T H      äÇ    ≠     HƒJU    âXıuwZ⁄          "    < S A . D A T H      äÇ    ≠     êƒJU    âXıuwZ⁄          "    < S A . D A T H      äÇ    ≠     ÿƒJU    âXıuwZ⁄ Ä        "    < S A . D A T Ä      º    Òê     ≈JU    ∂˙uwZ⁄               B < w a a s m e d i c . 2 0 2 4 0 2 0 8 _ 1 0 1 3 2 8 _ 7 6 2 . e t l   Ä      º    Òê    †≈JU    ∂˙uwZ⁄ ¡              B < w a a s m e d i c . 2 0 2 4 0 2 0 8 _ 1 0 1 3 2 8 _ 7 6 2 . e t l   Ä      º    Òê     ∆JU    ∂˙uwZ⁄¡              B < w a a s m e d i c . 2 0 2 4 0 2 0 8 _ 1 0 1 3 2 8 _ 7 6 2 . e t l   X      ≈Å     Ç    †∆JU    π¸uwZ⁄           &    < l a s t a l i v e 0 . d a t X      ≈Å     Ç    ¯∆JU    π¸uwZ⁄           &    < l a s t a l i v e 0 . d a t X      ≈Å     Ç    P«JU    π¸uwZ⁄  Ä        &    < l a s t a l i v e 0 . d a t X      ´ë     Ç    ®«JU    π¸uwZ⁄           &    < l a s t a l i v e 1 . d a t X      ´ë     Ç     »JU    π¸uwZ⁄           &    < l a s t a l i v e 1 . d a t X      ´ë     Ç    X»JU    π¸uwZ⁄  Ä        &    < l a s t a l i v e 1 . d a t p      ÷r         ∞»JU    M	vwZ⁄               0 < E t w R T E v e n t L o g - S y s t e m . e t l     `      F$    s      …JU    ∫kvwZ⁄à                < D e b u g C h a n n e l . e t l     x          s     Ä…JU    ∫kvwZ⁄à              < < M i c r o s o f t - R M S - M S I P C % 4 D e b u g . e t l ê      E∂    Åù    ¯…JU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 3 - 1 1 - 1 8 - 1 0 - 3 - 6 - 5 4 0 . l o g   ê      E∂    Åù    à JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 3 - 1 1 - 1 8 - 1 0 - 3 - 6 - 5 4 0 . l o g   ê      º    Åù    ÀJU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ®ÀJU    NıvwZ⁄              R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    8ÃJU    NıvwZ⁄ Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    »ÃJU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    XÕJU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ËÕJU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    xŒJU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    œJU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g                                                                                                           ê      º    Åù     –JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ê–JU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù     —JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ∞—JU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    @“JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    –“JU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    `”JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ”JU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    Ä‘JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ’JU    NıvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    †’JU    NıvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    0÷JU    úWvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ¿÷JU    úWvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    P◊JU    úWvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ‡◊JU    úWvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    pÿJU    úWvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù     ŸJU    úWvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    êŸJU    úWvwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù     ⁄JU    úWvwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ∞⁄JU    ëI-vwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    @€JU    ëI-vwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    –€JU    ëI-vwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    `‹JU    ëI-vwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ‹JU    nK/vwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    Ä›JU    nK/vwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    ﬁJU    nK/vwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    †ﬁJU    nK/vwZ⁄  Ä            R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g   ê      º    Åù    0ﬂJU    √r6vwZ⁄               R < R - g p u - 0 - g 6 - c 2 0 0 - 2 0 2 4 - 2 - 8 - 1 8 - 1 3 - 2 8 - 9 1 9 . l o g                                                                       rule.remove()
              return
            }

            // Strip the important selector from the parent selector if at the beginning
            let importantSelector =
              typeof context.tailwindConfig.important === 'string'
                ? context.tailwindConfig.important
                : null

            // We only want to move the "important" selector if this is a Tailwind-generated utility
            // We do *not* want to do this for user CSS that happens to be structured the same
            let isGenerated = parent.raws.tailwind !== undefined

            let parentSelector =
              isGenerated && importantSelector && parent.selector.indexOf(importantSelector) === 0
                ? parent.selector.slice(importantSelector.length)
                : parent.selector

            // If the selector becomes empty after replacing the important selector
            // This means that it's the same as the parent selector and we don't want to replace it
            // Otherwise we'll crash
            if (parentSelector === '') {
              parentSelector = parent.selector
            }

            rule.selector = replaceSelector(parentSelector, rule.selector, applyCandidate)

            // And then re-add it if it was removed
            if (importantSelector && parentSelector !== parent.selector) {
              rule.selector = applyImportantSelector(rule.selector, importantSelector)
            }

            rule.walkDecls((d) => {
              d.important = meta.important || important
            })

            // Move pseudo elements to the end of the selector (if necessary)
            let selector = parser().astSync(rule.selector)
            selector.each((sel) => movePseudos(sel))
            rule.selector = selector.toString()
          })
        }

        // It could be that the node we were inserted was removed because the class didn't match
        // If that was the *only* rule in the parent, then we have nothing add so we skip it
        if (!root.nodes[0]) {
          continue
        }

        // Insert it
        siblings.push([meta.sort, root.nodes[0]])
      }
    }

    // Inject the rules, sorted, correctly
    let nodes = context.offsets.sort(siblings).map((s) => s[1])

    // `parent` refers to the node at `.abc` in: .abc { @apply mt-2 }
    parent.after(nodes)
  }

  for (let apply of applies) {
    // If there are left-over declarations, just remove the @apply
    if (apply.parent.nodes.length > 1) {
      apply.remove()
    } else {
      // The node is empty, drop the full node
      apply.parent.remove()
    }
  }

  // Do it again, in case we have other `@apply` rules
  processApply(root, context, localCache)
}

export default function expandApplyAtRules(context) {
  return (root) => {
    // Build a cache of the user's CSS so we can use it to resolve classes used by @apply
    let localCache = lazyCache(() => buildLocalApplyCache(root, context))

    processApply(root, context, localCache)
  }
}
